import Head from "next/head";
import { Inter } from "next/font/google";
import Navbar from "@/components/Navbar";
import HeroCard from "@/components/HeroCard";
import { useEffect } from "react";
import { useRouter } from "next/router";
import { useDispatch } from "react-redux";
import { getAllBlogs } from "@/config/axiosInstance";
import { addBlogs } from "@/redux/blogSlice";
import { wrapper } from "@/redux/store";
import BlogCard from "@/components/BlogCard";

const inter = Inter({ subsets: ["latin"] });

export default function Home({ blogs }) {
  const dispatch = useDispatch();
  const router = useRouter();

  const { totalPages, currentPage } = blogs;

  useEffect(() => {
    dispatch(addBlogs(blogs));
  }, []);

  return (
    <>
      <Head>
        <title>Advanced Blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mb-8">
        <Navbar />
        <div className="flex flex-col md:flex-row gap-8 justify-center my-6 pb-6 border-b">
          {blogs?.blogs?.slice(0, 2).map((blog) => {
            return <HeroCard key={blog?._id} blog={blog} />;
          })}
        </div>
        <div className="mb-6 grid grid-cols-2 md:grid-cols-4 gap-4 grid-auto-rows-min">
          {blogs?.blogs?.slice(2).map((blog) => {
            return <BlogCard key={blog?._id} blog={blog} />;
          })}
        </div>
        <div className="btn-group flex justify-center">
          <button
            onClick={() => router.push(`?page=${currentPage - 1}`)}
            className={`btn btn-outline ${currentPage <= 1 && "btn-disabled"}`}
          >
            Previous
          </button>
          <button
            onClick={() => router.push(`?page=${currentPage + 1}`)}
            className={`btn btn-outline ${
              totalPages <= currentPage && "btn-disabled"
            }`}
          >
            Next
          </button>
        </div>
      </main>
    </>
  );
}

export const getServerSideProps = async ({ query }) => {
  const page = Number(query.page) || 1;

  const { data } = await getAllBlogs(page);

  // const { data: searchedBlog } = await searchBlog(query.search);
  return {
    props: { blogs: data },
  };
};
